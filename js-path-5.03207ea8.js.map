{"mappings":"ACEc,CACZ,CAAE,KAAM,YAAa,MAAO,uBAAwB,EACpD,CAAE,KAAM,QAAS,MAAO,mBAAoB,EAC5C,CAAE,KAAM,OAAQ,MAAO,kBAAmB,EAC1C,CAAE,KAAM,YAAa,MAAO,uBAAwB,EACpD,CAAE,KAAM,SAAU,MAAO,oBAAqB,EAC9C,CAAE,KAAM,QAAS,MAAO,mBAAoB,EAC5C,CAAE,KAAM,SAAU,MAAO,oBAAqB,EAC9C,CAAE,KAAM,WAAY,MAAO,sBAAuB,EAClD,CAAE,KAAM,SAAU,MAAO,oBAAqB,EAC9C,CAAE,KAAM,OAAQ,MAAO,mBAAoB,EAC5C,CAEK,OAAO,CAAC,AAAA,IACV,EAAK,EAAE,CAAG,ACKM,CAAA,CAAC,EAAO,EAAE,IAC5B,IAAI,EAAK,GACL,EAAQ,OAAO,eAAe,CAAC,IAAI,WAAY,GAAQ,IAC3D,KAAO,KACL,GAAM,ACzBH,kEDyBoB,CAAC,AAAc,GAAd,CAAK,CAAC,EAAK,CAAM,CAE3C,OAAO,CACT,CAAA,GDVA","sources":["<anon>","src/app.js","node_modules/nanoid/index.browser.js","node_modules/nanoid/url-alphabet/index.js"],"sourcesContent":["/* @ts-self-types=\"./index.d.ts\" */ const $f34a3dcdc8494601$export$2b646eea95309f00 = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\n\n\nlet $f00a97eed1786a48$export$4385e60b38654f68 = (bytes)=>crypto.getRandomValues(new Uint8Array(bytes));\nlet $f00a97eed1786a48$export$a5cee9e955a615e5 = (alphabet, defaultSize, getRandom)=>{\n    let mask = (2 << Math.log2(alphabet.length - 1)) - 1;\n    let step = -~(1.6 * mask * defaultSize / alphabet.length);\n    return (size = defaultSize)=>{\n        let id = '';\n        while(true){\n            let bytes = getRandom(step);\n            let j = step | 0;\n            while(j--){\n                id += alphabet[bytes[j] & mask] || '';\n                if (id.length >= size) return id;\n            }\n        }\n    };\n};\nlet $f00a97eed1786a48$export$62e99e5c9f473d7f = (alphabet, size = 21)=>$f00a97eed1786a48$export$a5cee9e955a615e5(alphabet, size | 0, $f00a97eed1786a48$export$4385e60b38654f68);\nlet $f00a97eed1786a48$export$ac4959f4f1338dfc = (size = 21)=>{\n    let id = '';\n    let bytes = crypto.getRandomValues(new Uint8Array(size |= 0));\n    while(size--)id += (0, $f34a3dcdc8494601$export$2b646eea95309f00)[bytes[size] & 63];\n    return id;\n};\n\n\nconst $e73bf42412feb220$var$users = [\n    {\n        name: \"\\u041E\\u043B\\u0435\\u043A\\u0441\\u0430\\u043D\\u0434\\u0440\",\n        email: \"oleksandr@example.com\"\n    },\n    {\n        name: \"\\u041C\\u0430\\u0440\\u0456\\u044F\",\n        email: \"maria@example.com\"\n    },\n    {\n        name: \"\\u0406\\u0432\\u0430\\u043D\",\n        email: \"ivan@example.com\"\n    },\n    {\n        name: \"\\u0410\\u043D\\u0430\\u0441\\u0442\\u0430\\u0441\\u0456\\u044F\",\n        email: \"anastasia@example.com\"\n    },\n    {\n        name: \"\\u0410\\u043D\\u0434\\u0440\\u0456\\u0439\",\n        email: \"andrii@example.com\"\n    },\n    {\n        name: \"\\u041E\\u043B\\u0435\\u043D\\u0430\",\n        email: \"olena@example.com\"\n    },\n    {\n        name: \"\\u0414\\u043C\\u0438\\u0442\\u0440\\u043E\",\n        email: \"dmytro@example.com\"\n    },\n    {\n        name: \"\\u041A\\u0430\\u0442\\u0435\\u0440\\u0438\\u043D\\u0430\",\n        email: \"kateryna@example.com\"\n    },\n    {\n        name: \"\\u0421\\u0435\\u0440\\u0433\\u0456\\u0439\",\n        email: \"serhii@example.com\"\n    },\n    {\n        name: \"\\u042E\\u043B\\u0456\\u044F\",\n        email: \"yulia@example.com\"\n    }\n];\n$e73bf42412feb220$var$users.forEach((item)=>{\n    item.id = (0, $f00a97eed1786a48$export$ac4959f4f1338dfc)();\n}) // console.log(users);\n;\n\n\n//# sourceMappingURL=js-path-5.03207ea8.js.map\n","import { nanoid } from \"nanoid\";\n\nconst users = [\n  { name: \"Олександр\", email: \"oleksandr@example.com\" },\n  { name: \"Марія\", email: \"maria@example.com\" },\n  { name: \"Іван\", email: \"ivan@example.com\" },\n  { name: \"Анастасія\", email: \"anastasia@example.com\" },\n  { name: \"Андрій\", email: \"andrii@example.com\" },\n  { name: \"Олена\", email: \"olena@example.com\" },\n  { name: \"Дмитро\", email: \"dmytro@example.com\" },\n  { name: \"Катерина\", email: \"kateryna@example.com\" },\n  { name: \"Сергій\", email: \"serhii@example.com\" },\n  { name: \"Юлія\", email: \"yulia@example.com\" },\n];\n  \nusers.forEach(item => {\n    item.id = nanoid();\n\n})\n    // console.log(users);","/* @ts-self-types=\"./index.d.ts\" */\nimport { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step | 0\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size | 0, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array((size |= 0)))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n"],"names":["name","email","forEach","item","id","size","bytes","crypto","getRandomValues","Uint8Array"],"version":3,"file":"js-path-5.03207ea8.js.map"}